<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yannick Mahe's blog</title>
    <description></description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Being the sole developer at a SaaS startup</title>
        <description>&lt;p&gt;I am currently the only developer at the company where work. Despite the fact that we&amp;#8217;re a tech company selling SaaS software, it&amp;#8217;s going somewhat well.&lt;/p&gt;

&lt;p&gt;I am in charge of pretty much anything technical (aside from internal network, internet and phones, thank God). Around 75% of my time is spent on development of new features and R&amp;amp;D. The other 25% is meetings, hosting, strategy, a little pre-sales etc.&lt;/p&gt;

&lt;p&gt;The big question is productivity. We have made efforts to increase my productivity as much as possible. I&amp;#8217;m not a sysadmin, so for hosting we used a consultant that set up our cloud in a way that is both efficient, and makes it easy to upgrades our apps. On development, I made a number of small technical migrations to increase productivity (custom CSS to Bootstrap, Scriptaculous to jQuery) and we are moving forward with new small migrations to bypass the limitations of our legacy framework. Effective continuous integration has been setup to make QA easier and faster. Some tech documentation has also been written to enable me to be as productive as possible in finding the best approach to a problem. This is a number of quick hints for some recurring problems, some UML diagrams for the most complex parts of the app as well as for the database.&lt;/p&gt;

&lt;p&gt;It has also been our strategy to limit and eventually block altogether specific features our clients might want. Let me explain this one: we sell software to Enterprise(y) customers. Most of them are used to custom made software on which any change they want can be done. We don&amp;#8217;t allow that - or rather we no longer allow that. Instead, we find solutions to their problems using existing features, and sometimes develop features that are in keeping with our product strategy. There is now just one codebase, for all clients, instead of one codebase per client.&lt;/p&gt;

&lt;p&gt;Also important, being the sole developer, there is no overhead. Having been in and led many teams, I know how productive a three people team would be. In theory, I should be roughly one third as productive as a team of that size. In reality, there is so little overhead that I believe I&amp;#8217;m about half as productive as three people team. This is invaluable, and we take advantage of this. The mythical 5-minute change is possible when you&amp;#8217;re a one person team.&lt;/p&gt;

&lt;p&gt;Is it a good idea?&lt;/p&gt;

&lt;p&gt;Fuck no! This situation is due to difficult circumstances in our key market. This has been emphasized by the fact that our company has moved from half-product, half-service to being an actual product oriented SaaS startup. While our business model is sound, it has meant that revenu has dropped two years ago and is just now coming back to its original level. The situation is untenable long term, and my goal is to have a fully operationnal dev team in the next two years.&lt;/p&gt;

&lt;p&gt;Paradoxically, my being handle to handle the situation has led to it carrying on. There hasn&amp;#8217;t yet been a crisis I haven&amp;#8217;t been able to handle. This has meant that increasing the dev team has been a &amp;#8220;nice to have&amp;#8221; - a &amp;#8220;very &lt;em&gt;very&lt;/em&gt; &lt;strong&gt;very&lt;/strong&gt; nice to have&amp;#8221; one might say, but has had to come after reimbursing our debts.&lt;/p&gt;

&lt;p&gt;Now, everyone is aware that this situation isn&amp;#8217;t ideal for Alveos. There are a number of risks we try and mitigate. For example, I have to be able to keep in touch when on vacation. To avoid sudden critical bugs, I forbid the delivery of new features three weeks before I go on vacation.&lt;/p&gt;

&lt;p&gt;The biggest risk, of course, is my leaving or worse sudden absence due to accidental death/disease/finding my true calling as a hobo - pick one. Leaving is somewhat mitigated by the three month notice that is the norm in France, but the market being what it is, finding a replacement would be difficult. Regardless, any sudden absence is a difficult risk to live with and is tough to mitigate, as hard as I try. I don&amp;#8217;t want to leave, but I also don&amp;#8217;t want to put the company in jeopardy by breaking my leg. Therefore, we have a number of contractors that are operational for development on our app that we can call if need be. This is not ideal, but it is better than the alternative.&lt;/p&gt;

&lt;p&gt;My coworkers are also very aware of the &amp;#8220;burnout&amp;#8221; risk. It has happened to previous devs, and to me as well at a former company. I feel I&amp;#8217;m way below my maximum working rate, to be honest, and we are keeping it as sustainable as possible.&lt;/p&gt;

&lt;p&gt;Obviously, this situation can&amp;#8217;t go on forever. While budget is an issue, it is my goal to have a resilient tech team that can move faster than I can alone. Of course, given the overhead a team brings, to double productivity we would probably need to be three. We are getting interns as a start, and depending on success, we will see where that takes us.&lt;/p&gt;</description>
        <pubDate>Tue, 01 Oct 2013 00:00:00 +0200</pubDate>
        <link>/startup/2013/10/01/being-the-sole-developer-at-a-SaaS-startup.html</link>
        <guid isPermaLink="true">/startup/2013/10/01/being-the-sole-developer-at-a-SaaS-startup.html</guid>
      </item>
    
      <item>
        <title>Ensuring quality in offshore software projects</title>
        <description>&lt;p&gt;&lt;em&gt;Note: I was working in China for some time on French offshore software projects. The company&amp;#8217;s business model was to have a French customer facing front, with the development work done in China. One project in particular was a high priority project - as well as being a large and complex project. This is a proposal I wrote to try and ensure quality for the future developments.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There have been a lot of times when the answer to the quality issues we&amp;#8217;ve had on the project were give this response from management : &amp;#8220;Be careful&amp;#8221;, &amp;#8220;Failure is not an option&amp;#8221;, or even &amp;#8220;We&amp;#8217;re just asking you to do your job&amp;#8221;. It seems that seen from France, the main reasons for our quality problems are that the China team is not careful, does not understand the needs of the client, or simply does not understand the need for quality. This could not be further from the truth.&lt;/p&gt;

&lt;p&gt;The need for quality and the need are completely understood by the China team. This project remains the only project where every level of higher-ups can come crashing down on the China team. This has long been taken into account, and these issues are not the cause the the quality issues we face.&lt;/p&gt;

&lt;p&gt;This project in an extremely complex one: 250 tables in the database, 1000 classes, and that&amp;#8217;s for just one app. We have no less that 30 independent apps, all interconnected one way or the other. The result is simple: no matter how careful the developer is, it is impossible for him to take into account all the risks when solving a task.&lt;/p&gt;

&lt;p&gt;This is also a rather old project, on which around 20 different developers have worked, from the very worst to the very best of the company. This mean, whatever the level of the current developers, the project&amp;#8217;s history is the main thing impeding quality developments. The character encoding issue, for example, is first and foremost a problem due to a bad encoding choice at the project&amp;#8217;s genesis, much more than due to all the later actions that have tried to make do with this bad choice.&lt;/p&gt;

&lt;p&gt;I am not saying the different people working on the project shouldn&amp;#8217;t be careful. Everybody is giving their all. My point is this: if the first line of defense is that nobody should make mistakes, we&amp;#8217;re on a crash course.&lt;/p&gt;

&lt;p&gt;Quality is, before being a people issue, a process issue.&lt;/p&gt;

&lt;p&gt;Of course, you can tell developers to &amp;#8220;be careful&amp;#8221; when working on files on a shared server, but you&amp;#8217;ll have much fewer problems if we use source control.&lt;/p&gt;

&lt;p&gt;Of course, you can tell the person doing deliveries in production to &amp;#8220;be careful&amp;#8221; when delivering code line by line and task by task, but you&amp;#8217;ll have much fewer problems if you deliver a whole sprint at once.&lt;/p&gt;

&lt;p&gt;The objective is therefore to have a fool-proof process - or as close as we can get.&lt;/p&gt;

&lt;h1 id='process_improvement_proposals'&gt;Process improvement proposals&lt;/h1&gt;

&lt;h2 id='development_process'&gt;Development process&lt;/h2&gt;

&lt;p&gt;Task evaluation is still a relatively important problem. We can&amp;#8217;t have feedback on the quality of estimates. It seems, however, that most estimates are two low, regardless of the person doing the estimate. To get more exact estimates, there should be time set aside to check what exactly should be done.&lt;/p&gt;

&lt;p&gt;There should also be an effort to setup code quality measurement tools. This should allow us to follow industry-standard coding standards, which should increase the readability of the code. Current code should gradually be brought up to the standard. This would allow for a clear gain in productivity as the current codebase is, to put it simply, a huge mess.&lt;/p&gt;

&lt;h2 id='quality_process'&gt;Quality process&lt;/h2&gt;

&lt;p&gt;I believe it is foolish to try and hire more competent developers: for the last few years, the best developers in the company are move from their original team to this project&amp;#8217;s team. It is better to try and find a process that will work with the current team, or even a less competent team.&lt;/p&gt;

&lt;p&gt;Currently, there are only 2 test levels: developer and QA engineer. The minimum to limit development side-effects would be to have 5 : developer, regression tests before commiting, full on regression testing on the regression server, QA engineer in preprod and QA engineer in prod.&lt;/p&gt;

&lt;p&gt;To avoid problems during delivery, there should also be perfect coherence between the different environment and regression tests included in the delivery process.&lt;/p&gt;

&lt;h2 id='crisis_management'&gt;Crisis management&lt;/h2&gt;

&lt;p&gt;The project often encounters crisis caused by quality problems or unforeseen change of the use of the application (system load). Every single time, these problems are handled in an ad hoc manner&lt;/p&gt;

&lt;p&gt;It should be easy to setup a crisis management process to handle these crisis in the most efficient way. To do so, after every crisis, the &amp;#8220;5 whys&amp;#8221; questions should be asked to find to root cause of the problem, and every time document a diagnosis method and a resolution process.&lt;/p&gt;

&lt;p&gt;Furthermore, it is sometimes impossible to handle a crisis rapidly as some people do not have access to the system, or the people that know how to act are unavailable. To avoid that, there should be triple redundancy on people who have the hard-to-know info: prime, backup, fallback. That way, the probability that it is impossible to act becomes almost null.&lt;/p&gt;

&lt;p&gt;A schedule should be set up to know who can be contaced and when. That should allow info to be available on each type of issue: system, development, etc.&lt;/p&gt;

&lt;h2 id='communication'&gt;Communication&lt;/h2&gt;

&lt;p&gt;Communication is a huge issue at out company, which is unavoidable for any offshore company. This is so much more of a problem on this project because there are more people working on it: 6 developers, 2 QA engineers, 1 architect, 1 Team leader, 1 html integrator, 2 sysadmins, 1 French developer, 1 project manager, 1 project director. That&amp;#8217;s not even mentionning, the General Manager, Operations Manager, Integration Team Leader or the client and its partners.&lt;/p&gt;

&lt;p&gt;The result is simple: &lt;em&gt;nobody&lt;/em&gt; know everything about what&amp;#8217;s going on in this project, and a lot of decisions are taken without knowing if they are tenable. Issue analysis can&amp;#8217;t be considered exact, and a lot of effort is spent trying to uphold what turned out to be a bad decision. One example is the release date of the last project: the client chose the date &lt;em&gt;before&lt;/em&gt; seeing a schedule, which meant all the good decisions from V4&amp;#8217;s post mortem had to be ignored.&lt;/p&gt;

&lt;p&gt;The action plan on this is simple. All the information should be centralised by the client-side Project Manager, including choices on system architecture, and the results of the CEO-level meetings. If nobody has all the information, it becomes impossible to correctly anticipate which action should be taken. Also, before decisions are taken, all the info should be obtained: production load, client imperatives, resource availability, etc. This information centralisation should be set up before new developments start.&lt;/p&gt;

&lt;p&gt;Furthermore, contacts between France and China via Skype are not enough to ensure fluid communication. The solution implemented by numerous offshore companies is the concept of &amp;#8220;Ambassador&amp;#8221;. Every three month one person from France should stay one week in China, and vice versa.&lt;/p&gt;

&lt;p&gt;To make day-to-day communication easier, webcams should be used to make Skype communication more efficient.&lt;/p&gt;

&lt;h2 id='motivation'&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Team motivation has a direct and evident link with quality: a passionate developer will of course do better than the one who doesn&amp;#8217;t care. Motivation is slipping the last few months. Overtime has a very bad effect on morale, especially when it is useless. Overtime should only be used with a concrete goal in mind. But, more importantly, it should be avoided and considered a last resort. Currently, overtime is being seen as the solution to all problems. This must be changed.&lt;/p&gt;

&lt;h2 id='risk_management'&gt;Risk management&lt;/h2&gt;

&lt;p&gt;Ever since V4, a primitive risk management system is in place. To go further on this, risks should be taken into account further upstream, by quantifying them in the schedule. There should also be a dedicated activity of risk discovery at project initialisation with dedicated time. This would enable us to validate risks with the people in charge of development, delivery, system, and client. The objective would be to only encounter a very small number of unforeseen problems.&lt;/p&gt;

&lt;h2 id='documentation'&gt;Documentation&lt;/h2&gt;

&lt;p&gt;Of course, the project evolve so fast, and the client&amp;#8217;s requirement evolve so fast that it is irrealistic to believe that we can keep an up to date, complete and reliable documentation. However, it is important to pursue the documentation of processes to ensure that everybody will be able to act. This includes a complete documentation of the system architecture both in China and in France, a list of stakeholders client-side, partner-side and on our side, as well as an exhaustive documentation of the development process and the delivery process.&lt;/p&gt;

&lt;h2 id='continuous_improvement'&gt;Continuous improvement&lt;/h2&gt;

&lt;p&gt;To maintain client satisfaction, we should be constantly improving. To do so, we should hae a few metrics to follow, on three issues: development quality, delivery quality, and system architecture quality. We should follow closely the evolution of these metrics. This will enable us to act when the evolution goes the wrong way.&lt;/p&gt;

&lt;h1 id='and_in_conclusion'&gt;And in conclusion&lt;/h1&gt;

&lt;p&gt;All this seems to be quite an investment, but as Philip Crosby has stated &amp;#8220;Quality is free&amp;#8221;. The return on investment is such that we can consider that gaining quality will be free in the end. Quality problems are simple problems with known solutions. However, the possibility to act is not China-side. The ball is now in your court.&lt;/p&gt;</description>
        <pubDate>Mon, 16 Sep 2013 00:00:00 +0200</pubDate>
        <link>/process/2013/09/16/ensuring-quality-in-offshore-software-projects.html</link>
        <guid isPermaLink="true">/process/2013/09/16/ensuring-quality-in-offshore-software-projects.html</guid>
      </item>
    
      <item>
        <title>Everything is going to explode! or: Moving development forward when you have hit a dead end.</title>
        <description>&lt;p&gt;When I joined Alveos, the overall feeling at the company was that our main product was impossible to move forward. It had been developed originally 4 years before, and grew organically. Previous tech leads felt that we had hit a dead-end development wise and that continuing development was dangerous. These people were very very competent developers, knew the product from end to end. I should know, I live in their code everyday. Yet, it turned out, the were wrong.&lt;/p&gt;

&lt;p&gt;I know where their feeling came from. For one thing, developers like to start fresh, start a new project and &amp;#8220;do it right this time&amp;#8221;. But more importantly in this case, the maintainability was particularly bad. Or rather it was the worst they&amp;#8217;d ever seen. Unlike most of their previous projects, this project had rapid and ongoing development. This meant the ripple effects of small, quick and bad decisions were felt regularly for years. &amp;#8220;We should redo that part&amp;#8221; had become a description of more and more parts of the project, and radical changes had to be put together the MacGyver way rather than with careful analysis. Most developers hate that, and with good reason.&lt;/p&gt;

&lt;p&gt;Also, the feeling of &amp;#8220;If we do anything, it&amp;#8217;s all going to explode&amp;#8221; came from some particularly difficult times. During those time, changes brought with them new bugs and clients were exceedingly unhappy. The job was basically putting out fire after fire. Adding to that, the hosting solution (one server per app for frontend and backend) was reaching its limits. On top of that, the upgrade scripts were unwieldly and sometimes required manual intervention or failed all together. All this added to the clients&amp;#8217; perception that nothing was working right.&lt;/p&gt;

&lt;p&gt;When I came to the company after the previous tech lead had left, this impression was pervasive even among the non-tech staff. Despite early good impressions on my part regarding the app&amp;#8217;s maintainability (regardless of its obsolete framework), it was chosen to move forward with a complete rewrite. As I had stated before, this was stopped for a number of reasons: cost, risks, and a strategy that would have prevented migrating existing clients. Paradoxically, writing from scratch while permitting migration was deemed impossible/too hard/too time-consuming: the kernel of the app was considered too hard to port as it was deeply encroached in the framework. So the rewrite stopped. It was clear we wouldn&amp;#8217;t get a new &amp;#8220;clean&amp;#8221; app. Yet we were at risk of becoming obsolete.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s when I tried to make us go forward on the existing app despite the perceived risks. Just small risk-free changes at first. Pretty simple stuff, but often important enough to be noticed: showing the number of items in the shopping cart for example. Changing the position of buttons to be more consistent across the app. Gradually, the changes I added became large ones. It turned out the app was quite maintainable, even though evidently flawed architecture-wise in some places.&lt;/p&gt;

&lt;p&gt;I believe my difference in impression came from previous experiences, maintaining much older code that had been written by inexperienced developers before PHP frameworks became commonplace. Compared to those project, this app was almost a breath of fresh air. The guys before me were good, and their worst was better than most. Having worked on really bad projects, I&amp;#8217;m pretty used to working on bad code. Bad projects also help you learn to work even not everything is as it should be. What also helped me quite a bit was that I wasn&amp;#8217;t as productive as my predecessors, given that my knowledge of the app&amp;#8217;s architecture was still maturing. So, instead of introducing new changes regularly, I&amp;#8217;d introduce new ones every few weeks. It turned out, spacing the start of the fires made them easier to put out.&lt;/p&gt;

&lt;p&gt;We underwent a hosting migration that allowed us to scale our app much better. The app was once again fast enough (around 6 times faster on worst case scenarios), and began to be considered stable again. Our contractor for that did a really incredible job, moving us to scalable, relatively cheap hosting, with a Chef delivery system that was both reliable and easy to use.&lt;/p&gt;

&lt;p&gt;With these successes, I began to grow bolder as my knowledge of the app&amp;#8217;s maintainability grew. I had encountered my share of bad code before, and this wasn&amp;#8217;t nearly the worst. We started implementing &lt;a href='/startup/process/2013/08/12/moving-forward.html'&gt;a real roadmap&lt;/a&gt;, and moving forward. Our current pace is faster than it has ever been, I believe, save for the original release of the app. This whole evolution took about one year, culminating in the &lt;a href='/coding/2013/09/02/redoing-the-whole-user-interface-of-our-web-application.html'&gt;complete overhaul of the application&amp;#8217;s interface&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We lost a lot of time because of the feeling nothing could be done. If I encounter a development dead-end again, I believe the best approach would be, instead of immediately going towards a costly rewrite to ask these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what do we want to do?&lt;/li&gt;

&lt;li&gt;what can&amp;#8217;t we do that we want to do?&lt;/li&gt;

&lt;li&gt;why can&amp;#8217;t we do it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I had asked these questions in the beginning, I think we could have saved six months. It turned out that what we really couldn&amp;#8217;t do, we could live with. And what we can do is really a lot.&lt;/p&gt;</description>
        <pubDate>Mon, 09 Sep 2013 00:00:00 +0200</pubDate>
        <link>/process/2013/09/09/everything-is-going-to-explode.html</link>
        <guid isPermaLink="true">/process/2013/09/09/everything-is-going-to-explode.html</guid>
      </item>
    
      <item>
        <title>Redoing the whole user interface of our web application</title>
        <description>&lt;p&gt;Our application didn&amp;#8217;t have its interface change since 2008. Even back then, it wasn&amp;#8217;t winning any prize for usability or design. That interface was designed, like a lot are, by the original developers. Like most developer &amp;#8220;designed&amp;#8221; interface, it showed a clear lack of foresight. Often, it was implemented in such a way that made it easier for the developer to maintain than for the user to use. It was easily breakable, and small changes could render whole features impossible to use.&lt;/p&gt;

&lt;p&gt;Also problematic, it used Scriptaculous (Prototype), as that library was then integrated in the server-side framework (Symfony). Over time, as jQuery overtook Scriptaculous in both popularity and usability for the developer, the problems with this integration became more and more evident. While jQuery has a thriving plugin community, it has become tough to even find good documentation for Scriptaculous apps. See &lt;a href='/symfony/2013/08/19/the-walking-dead.html'&gt;this post&lt;/a&gt; for more on the risks of working with an older framework.&lt;/p&gt;

&lt;p&gt;The interface did have a lot of good qualities though. There is something to be said for its consistency across the whole application. It was, even if not always intuitive, heavily consistent in between features. The same pattern was repeated over and over and over, which made it somewhat easy to guess where you could find one functionnality or another. It was also heavily optimised for performance through its heavy use of ajax instead of a more traditionnal &amp;#8220;reload whole page&amp;#8221; pattern that would have been easier to setup. Interestingly too, it aimed to be a &lt;a href='http://www.csszengarden.com/'&gt;CSS Zen Garden&lt;/a&gt; of sorts, with a custom CSS for each client. The issue with that of course, was that it demanded heavy CSS editing whenever we got a new client, and often didn&amp;#8217;t have the hoped modularity. This meant that sometimes, functionnality that worked with one CSS didn&amp;#8217;t work with another.&lt;/p&gt;

&lt;p&gt;For the last 5 years, we made do with it.&lt;/p&gt;

&lt;p&gt;We still sold to some clients, still managed to train new users, and still kept maintaining the app. We sometimes tried to have some small incremental benefits, but there was a fear we could easily break the app. Not unjustified, this fear mainly stemmed from the fact that what worked with one client often failed with another.&lt;/p&gt;

&lt;p&gt;Then in early 2012, we lost a big bid for a very big prospect. It was a brand everybody has heard of, and would have been the crown jewel of our client roster. We lost to a competitor over usability. We matched feature for feature, were cheaper, but looked harder to use - and really were harder to use to an extent. We also lacked eye-candy, which does make a very big difference, especially when you sell to marketing. The app was to be a flagship of sorts for their brand to their resellers. An ugly app hurts the brand image.&lt;/p&gt;

&lt;p&gt;Well, that was a big wake up call.&lt;/p&gt;

&lt;p&gt;We decided to redo everything. Our goal was to have a new interface that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;looked modern&lt;/li&gt;

&lt;li&gt;allowed for some customization per client&lt;/li&gt;

&lt;li&gt;was easily maintainable&lt;/li&gt;

&lt;li&gt;was easily expanded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We ended up choosing to use &lt;a href='http://getbootstrap.com/'&gt;Bootstrap&lt;/a&gt;, as it meant we had a complete toolkit that we could adapt to the different situations we would face. We liked the look and feel, and easily could customize the look per client.&lt;/p&gt;

&lt;p&gt;Bootstrap uses jQuery for its javascript components, which meant we would have to either make our whole app work with both jQuery and Scriptaculous or rewrite all our frontend code to use jQuery instead of Scriptaculous. I chose the second option: it would take more time, but we would end up with something more easily maintainable. While there is no automatic way to go from Prototype to jQuery, and everything has to be done by hand, it is fairly straightforward. That part took about two weeks, which left me wondering why it hadn&amp;#8217;t been done before.&lt;/p&gt;

&lt;p&gt;Then, I set up moving from the custom CSS classes and HTML structure to Bootstrap classes and HTML. That part was the longest, and took around 3 months. The only significant hurdle was to ensure Ajax features didn&amp;#8217;t break in the move. This was actually time consuming, as our app made heavy use of in-app popins. We had created custom popin classes that enabled us to superimpose multiple popins ; Bootstrap doesn&amp;#8217;t let us do that, so we had to come up with simpler ways to let the user interact with the application. At debugging, this was the part that had the most bugs, especially since it didn&amp;#8217;t degrade gracefully: our original HTML was ok-looking when using Bootstrap, and could still be used. For the popins however, if we didn&amp;#8217;t change the behavior, it wouldn&amp;#8217;t work &amp;#8220;as is&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Finally, I set up customization. The idea was pretty simple: changing the color scheme for each client. Bootstrap gave us an easy way to do that. We had the user change the color scheme, and recompile the Bootstrap less files with the new color variable values when it was done. Fairly easy. That way, only colors changed, and no customization would break the app.&lt;/p&gt;

&lt;p&gt;In the end redoing everything took about three months, for a single developer. It is not that big of an undertaking, even for a company with limited resources and was clearly worth it. It was another three months of use in production before all the wrinkles were ironed. We are currently migrating each of our clients to the new interface.&lt;/p&gt;

&lt;p&gt;In the year since the rewrite, we have signed 4 times more clients than the year before. Of course, not all of that can be attributed to the user interface: the recession was in full swing in France before, and our sales approach has evolved greatly. Still, it certainly helped, and the original cost of redoing the interface has been recouped now.&lt;/p&gt;

&lt;p&gt;We are all certain, if we had had that interface, we wouldn&amp;#8217;t have lost that one prospect.&lt;/p&gt;</description>
        <pubDate>Mon, 02 Sep 2013 00:00:00 +0200</pubDate>
        <link>/coding/2013/09/02/redoing-the-whole-user-interface-of-our-web-application.html</link>
        <guid isPermaLink="true">/coding/2013/09/02/redoing-the-whole-user-interface-of-our-web-application.html</guid>
      </item>
    
      <item>
        <title>Learning to code on a low end graphical calculator</title>
        <description>&lt;p&gt;This is how I first started to program, in 1997 to be exact. It was the year I entered high school. Every students was required to have a &lt;a href='http://en.wikipedia.org/wiki/TI80'&gt;TI80&lt;/a&gt; or higher, an entry level programmable graphical calculator. This marvelous little machine cost 100 French Francs at the time, roughly $20 USD or 15 Euros.&lt;/p&gt;
&lt;img src='/assets/TI80.jpg' style='float: left; margin-right: 40px;' alt='TI80' /&gt;
&lt;p&gt;I started programming withit as soon as one of my friends showed me how he had created a rock-paper-scissors program on his TI80, and I could never program enough. I programmed before, during and after class - much to the irritation of my teachers (using a calculator in French class is somewhat conspicuous). Like many people who ended up being programmers, I had just found something I loved. My TI80 is dead now, I tore it apart to try and put it back together as soon as I upgraded, the next year.&lt;/p&gt;

&lt;p&gt;Programming on the TI80 was, in retrospect, a peculiar experience. The language was TI-BASIC, which was a quirky language to say the least especially, in its TI80 form:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the keyboard was calculator style, with the letters ordered alphabetically&lt;/li&gt;

&lt;li&gt;you didn&amp;#8217;t type the program text but inputted &lt;a href='http://en.wikipedia.org/wiki/Lexical_analysis'&gt;lexemes&lt;/a&gt; directly. For example, to use a for loop, you didn&amp;#8217;t type the letter F, O and R, but you went in the &amp;#8220;Program&amp;#8221; menu, and chose the seventh item from the list. In your program code, the &amp;#8220;FOR(&amp;#8221; would be then be displayed and you could input your parameters.&lt;/li&gt;

&lt;li&gt;there was no way to comment your code&lt;/li&gt;

&lt;li&gt;variable names were all exactly one letter long and always in caps (in fact everything was always in caps); and variables could only hold a float value. Some of these variables could be overwritten by the system. X and Y notably got set to coordinates chosen on the screen, so you could never use these variables in any program with graphical capabilities. This meant that you could use at most 25 variables (the greek letter theta &amp;#952; was also available) in a program, all with nondescript names. All these variables were system-wide global variables.&lt;/li&gt;

&lt;li&gt;variables only held floating point values, no strings, objects, arrays&amp;#8230;&lt;/li&gt;

&lt;li&gt;you couldn&amp;#8217;t create macros or functions in a program. You could call a program from another program, but there was no direct way to pass data from one program to the other, you used the variables as they were all global&lt;/li&gt;

&lt;li&gt;the only data model available were arrays, called lists. There were only 6 lists available, with a max size of 99 items, and of course they could only store floats.&lt;/li&gt;

&lt;li&gt;there was no way to get data from the user during the program run apart from a prompt. This meant there was no way for the calculator to tell which key was being pressed, so any real time interaction was out of the question&lt;/li&gt;

&lt;li&gt;storing data in variables was done in the opposite way to the standard. Instead of typing: A = 1, you typed: 1-&amp;gt;A&lt;/li&gt;

&lt;li&gt;goto were available, but you were limited to 36 goto destinations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there were also strong limitations with the hardware. there was only 7Kb of RAM on the calculator and no ROM, so you checked every byte to make sure your program would fit, and could run without hitting &amp;#8220;ERR: MEMORY&amp;#8221;.&lt;/p&gt;

&lt;p&gt;The screen was 2-colors, of course, and a very small screen (76 by 80 if I remember correctly).&lt;/p&gt;

&lt;p&gt;There was no data input port. This meant you were limited to TI-BASIC and couldn&amp;#8217;t use any Assembly, like other TIs could. This also meant that if you wanted to use a program a friend had or that you found on the Internet, the only way to get it was to retype it entirely.&lt;/p&gt;

&lt;p&gt;This led to a number of hacks to get the code running. I wouldn&amp;#8217;t put closing parenthesis at the end of my FOR loop definition because the interpreter would add it implicitely. That way I&amp;#8217;d gain one byte of memory.&lt;/p&gt;

&lt;p&gt;Two dimensionnal matrixes were handled by putting the array[n][m] data at the n*(array_size)+m position in the one dimensionnal list.&lt;/p&gt;

&lt;p&gt;Often, I&amp;#8217;d go at great length coming up with clever mathematical formulas that today I would do in a separate function, with a bunch of if/else. That would save me a few lines of code as well as making the program flow a little clearer.&lt;/p&gt;

&lt;p&gt;When I wanted the program flow to wait a few seconds, I&amp;#8217;d make the calculator calculate the hardest operation it could without running out of memory: 69!. If it tried to compute 70!, it crashed.&lt;/p&gt;

&lt;p&gt;At the time of course, I didn&amp;#8217;t realise that was weird in any way. It was just how you programmed.&lt;/p&gt;

&lt;p&gt;Here is an example of a program I wrote. In this programe you would, play a game similar to Invaders, except turn based instead of real time. Enemies would appear randomly at the top, and go down every turn. The player would try to kill them off one by one at each of his turn. Enemies would be one step closer everytime. I advise you not to try to understand this code&amp;#8230;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='ss'&gt;:PLOTSOFF&lt;/span&gt; 
&lt;span class='ss'&gt;:FNOFF&lt;/span&gt;
&lt;span class='ss'&gt;:CLRLIST&lt;/span&gt; &lt;span class='no'&gt;L1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;L2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;L4&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;XMIN&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;63&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;XMAX&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;XSCL&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;YMIN&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;47&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;YMAX&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;YSCL&lt;/span&gt;
&lt;span class='ss'&gt;:CLRDRAW&lt;/span&gt;
&lt;span class='ss'&gt;:CLRHOME&lt;/span&gt;
&lt;span class='ss'&gt;:DISP&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;INVADERS&lt;/span&gt;
&lt;span class='s2'&gt;:PAUSE&lt;/span&gt;
&lt;span class='s2'&gt;:CLRHOME&lt;/span&gt;
&lt;span class='s2'&gt;:DISP &amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class='no'&gt;INITIALIZATION&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;69&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;69&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;69&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;
&lt;span class='ss'&gt;:DISP&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;ENEMIES TO&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;DESTROY&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;SIZE?&lt;/span&gt;
&lt;span class='s2'&gt;:LBL F&lt;/span&gt;
&lt;span class='s2'&gt;:INPUT &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;95&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;,W&lt;/span&gt;
&lt;span class='s2'&gt;:IF W&amp;gt;94&lt;/span&gt;
&lt;span class='s2'&gt;:GOTO F&lt;/span&gt;
&lt;span class='s2'&gt;:IF W&amp;lt;0&lt;/span&gt;
&lt;span class='s2'&gt;:GOTO F&lt;/span&gt;
&lt;span class='s2'&gt;:INPUT &amp;quot;&lt;/span&gt;&lt;span class='no'&gt;LEVEL&lt;/span&gt;&lt;span class='sc'&gt;?&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;V&lt;/span&gt;
&lt;span class='ss'&gt;:PLOT1&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;L4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='err'&gt;°&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;**=&lt;/span&gt; &lt;span class='no'&gt;STAT&lt;/span&gt; &lt;span class='no'&gt;PLOT&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='no'&gt;TYPE&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;DIM&lt;/span&gt; &lt;span class='no'&gt;L3&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;DIM&lt;/span&gt; &lt;span class='no'&gt;L4&lt;/span&gt;
&lt;span class='ss'&gt;:FOR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;
&lt;span class='ss'&gt;:RANDINT&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;53&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;47&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;L4&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='ss'&gt;:END&lt;/span&gt;
&lt;span class='ss'&gt;:LBL&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
&lt;span class='ss'&gt;:IF&lt;/span&gt; &lt;span class='no'&gt;DIM&lt;/span&gt; &lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;W&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;
&lt;span class='ss'&gt;:GOTO&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;
&lt;span class='ss'&gt;:CLRDRAW&lt;/span&gt;
&lt;span class='ss'&gt;:FOR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;DIM&lt;/span&gt; &lt;span class='no'&gt;L3&lt;/span&gt;
&lt;span class='ss'&gt;:PT&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='no'&gt;ON&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;&lt;span class='no'&gt;L4&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='ss'&gt;:END&lt;/span&gt;
&lt;span class='ss'&gt;:IF&lt;/span&gt; &lt;span class='no'&gt;MIN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;L4&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;=&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;
&lt;span class='ss'&gt;:GOTO&lt;/span&gt; &lt;span class='mi'&gt;9&lt;/span&gt;
&lt;span class='ss'&gt;:TRACE&lt;/span&gt;
&lt;span class='ss'&gt;:LINE&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;
&lt;span class='ss'&gt;:LINE&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;11&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;
&lt;span class='ss'&gt;:LINE&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;21&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt; 
&lt;span class='ss'&gt;:LINE&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;33&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;
&lt;span class='ss'&gt;:LINE&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;43&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;
&lt;span class='ss'&gt;:LINE&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;53&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;
&lt;span class='ss'&gt;:LINE&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;63&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;
&lt;span class='ss'&gt;:FOR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;50&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;
&lt;span class='ss'&gt;:LINE&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;
&lt;span class='ss'&gt;:END&lt;/span&gt;
&lt;span class='ss'&gt;:FOR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;DIM&lt;/span&gt; &lt;span class='no'&gt;L3&lt;/span&gt;
&lt;span class='ss'&gt;:IF&lt;/span&gt; &lt;span class='n'&gt;X&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;
&lt;span class='ss'&gt;:GOTO&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;
&lt;span class='ss'&gt;:END&lt;/span&gt;
&lt;span class='ss'&gt;:L4&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='no'&gt;RANDINT&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;V&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;L4&lt;/span&gt;
&lt;span class='ss'&gt;:GOTO&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
&lt;span class='ss'&gt;:LBL&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;
&lt;span class='ss'&gt;:L4&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='no'&gt;RANDINT&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;V&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;L4&lt;/span&gt;
&lt;span class='ss'&gt;:RANDINT&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;53&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;47&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;L4&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='ss'&gt;:RANDINT&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;53&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;DIM&lt;/span&gt; &lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;
&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;47&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='no'&gt;L4&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;DIM&lt;/span&gt; &lt;span class='no'&gt;L4&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='ss'&gt;:GOTO&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
&lt;span class='ss'&gt;:LBL&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;
&lt;span class='ss'&gt;:FOR&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;DIM&lt;/span&gt; &lt;span class='no'&gt;L3&lt;/span&gt;
&lt;span class='ss'&gt;:LINE&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;&lt;span class='mi'&gt;47&lt;/span&gt;
&lt;span class='ss'&gt;:END&lt;/span&gt;
&lt;span class='ss'&gt;:PAUSE&lt;/span&gt;
&lt;span class='ss'&gt;:CLRHOME&lt;/span&gt;
&lt;span class='ss'&gt;:DISP&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;WON!&lt;/span&gt;
&lt;span class='s2'&gt;:PAUSE&lt;/span&gt;
&lt;span class='s2'&gt;:CLRLIST L1,L2,L3,L4&lt;/span&gt;
&lt;span class='s2'&gt;:CLRHOME&lt;/span&gt;
&lt;span class='s2'&gt;:STOP&lt;/span&gt;
&lt;span class='s2'&gt;:LBL 9&lt;/span&gt;
&lt;span class='s2'&gt;:FOR(A,10,47&lt;/span&gt;
&lt;span class='s2'&gt;:HORIZONTAL A&lt;/span&gt;
&lt;span class='s2'&gt;:END&lt;/span&gt;
&lt;span class='s2'&gt;:CLRDRAW&lt;/span&gt;
&lt;span class='s2'&gt;:PAUSE&lt;/span&gt;
&lt;span class='s2'&gt;:CLRHOME&lt;/span&gt;
&lt;span class='s2'&gt;:DISP &amp;quot;&lt;/span&gt;&lt;span class='no'&gt;GAME&lt;/span&gt; &lt;span class='no'&gt;OVER&lt;/span&gt;
&lt;span class='ss'&gt;:PAUSE&lt;/span&gt;
&lt;span class='ss'&gt;:CLRHOME&lt;/span&gt;
&lt;span class='ss'&gt;:CLRLIST&lt;/span&gt; &lt;span class='no'&gt;L1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;L2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;L3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='no'&gt;L4&lt;/span&gt;
&lt;span class='ss'&gt;:PLOTSOFF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href='http://en.wikipedia.org/wiki/Edsger_W._Dijkstra'&gt;Edsger W. Dijkstra&lt;/a&gt; famously said that those that start to learn programming with Basic become brain damaged. With the hindsight, I can see what he means. Good coding practices were few and far between in the TI-BASIC world. I&amp;#8217;m glad to report, though, there seems to be few lasting repercussions on my programming style. At least, I don&amp;#8217;t think it is, you&amp;#8217;d have to ask the people who maintain my code.&lt;/p&gt;

&lt;p&gt;What I mainly programmed was games. I started with some glorified rock-paper-scissors, and went on to more advanced territory. The one I liked the most was Minesweeper. Programming has always seemed more fun to me than actually playing the games I developed, but Minesweeper was one the few games I wrote that I actually used more than a few times.&lt;/p&gt;

&lt;p&gt;After that, I tried to do even more advanced games, but the wall that I hit was the calculator&amp;#8217;s inability to allow real time interaction. This limited me to turn based games, which often (in my opinion) are no fun. Especially with a low-level game designer like I am. I tried strategy games, but couldn&amp;#8217;t come up with a sufficiently advanced AI to make the game any fun to play.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s when I tried something else: I actually developed &lt;a href='https://github.com/yannickmahe/ti80-simcity'&gt;my own version of Sim-City for the TI80&lt;/a&gt;. It was very limited, both graphically and in functionality, but it was pretty fun to play. I was somewhat proud of myself for that one.&lt;/p&gt;

&lt;p&gt;A friend of mine had started his own website, on a Geocities type service provided by his ISP. He asked me if he could put my programs on his website. I, of course, was okay with it. So he typed the whole source code manually on his computer and put it on his website. In essence, before I had any real idea was open source was, I had released my first open source software.&lt;/p&gt;

&lt;p&gt;A few years later, I randomly googled &amp;#8220;TI80 games&amp;#8221; and found on a website I had never heard of, a list of a few games. (the website is still online today: &lt;a href='http://www.ti80.online.fr/jeux.php3'&gt;http://www.ti80.online.fr/jeux.php3&lt;/a&gt; - in french) The last one of the list was Sim-City. The one I had programmed. Apparently, someone had stumbled onto my friend&amp;#8217;s page, and copied the game on their calculator, played it, and found it good enough to put on their website. The only part that was slightly annoying was that they had removed my name from the program (pretty easy to do: remove DISP &amp;#8220;BY YANNICK&amp;#8221; from the code).&lt;/p&gt;

&lt;p&gt;I guess I got &amp;#8220;pirated&amp;#8221; but it was a pretty awesome feeling: somebody, somewhere, was actually playing a game I had created! But the best part was when I found somebody had used the game and liked it so much&amp;#8230; &lt;em&gt;they wrote a strategy guide&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further discussion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reddit discussion on &lt;a href='http://www.reddit.com/r/coding'&gt;/r/coding&lt;/a&gt;: &lt;a href='http://www.reddit.com/r/coding/comments/1l3ql1/learning_to_code_on_a_low_end_graphical_calculator/'&gt;link&lt;/a&gt;&lt;/p&gt;</description>
        <pubDate>Mon, 26 Aug 2013 00:00:00 +0200</pubDate>
        <link>/coding/2013/08/26/learning-to-code-on-a-low-end-graphical-calculator.html</link>
        <guid isPermaLink="true">/coding/2013/08/26/learning-to-code-on-a-low-end-graphical-calculator.html</guid>
      </item>
    
      <item>
        <title>The Walking Dead: the consequences of living with a legacy PHP framework</title>
        <description>&lt;p&gt;At our company, our main web app is based on Symfony 1.0, a PHP framework released in 2008. It was developped by a company called Sensio and open-sourced shortly after. It was a great framework when it came out, with all the good ideas from Ruby On Rails, CakePHP, etc. as well as great documentation, tutorials and a growing community. It is completely MVC, lets you write clean code, and does a lot of things a modern framework is supposed to let you do. But version 1.0 is clearly obsolete, and it is still our main framework.&lt;/p&gt;

&lt;p&gt;Since that framework came out, its subsequent versions, Symfony 1.1, 1.2, 1.3, 1.4 came out and died out. The 1.4 version came with a 3 year long term support promise from Sensio which ended in 2012. All the 1.X versions are based on the same overall architecture, and same principles. Sensio also released Symfony 2.0, 2.1, 2.2 and very recently, 2.3. which have a whole new architecture. This means a migration to those versions would all but require a complete rewrite&lt;/p&gt;

&lt;p&gt;We still develop on Symfony 1.0. There are a number of reasons why no migration was done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;early migrations were deemed somewhat unnecessary&lt;/li&gt;

&lt;li&gt;migrations are inherently risky&lt;/li&gt;

&lt;li&gt;the product became our main product only later on, it wasn&amp;#8217;t the company&amp;#8217;s focus in the beginning&lt;/li&gt;

&lt;li&gt;the company lacked a CTO able to articulate the use of spending money to upgrade a product that worked (i.e. politics)&lt;/li&gt;

&lt;li&gt;new &amp;#8220;visible&amp;#8221; features were deemed more important than technical upgrades.&lt;/li&gt;

&lt;li&gt;debugging was a full-time job at some point, leaving no time for an upgrade&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Three years into the product&amp;#8217;s life an effort was done to do a complete rewrite of the product using Symfony 2.X. It was to be done by a consulting company, and preliminary research was already finished when I joined the company. This project was stopped for several reasons, including cost (well into the six figures, a lot for a small company) and an estimated 6-month &amp;#8220;no new feature&amp;#8221; period (which in my opinion would have evolved into a 9-month to one year period). The biggest issue was that our existing client base would not have benefited from the migration. As we are a SaaS company with a recurring business model, keeping existing clients is as important to us as acquiring new clients. Other issues that didn&amp;#8217;t play a role in the decision to stop the rewrite but would have been problems if we had kept going were : new software isn&amp;#8217;t as reliable as production software. New software requires new training. It was not possible to be feature equivalent in that short period, so our new application would have been behind what our competition is able to do.&lt;/p&gt;

&lt;p&gt;So what is it like developing on a legacy framework ?&lt;/p&gt;

&lt;p&gt;You can no longer rely on the community. What that means in my day to day job is that some problems I encounter which could be solved by Googling the issue if I was using a new framework can&amp;#8217;t be solved that way, and time is lost finding my own solution. Symfony has a great and large community, even for the 1.X versions. However, 1.0 was one of the shortest lived versions, so the main sources for tech answers (Stack Overflow, Google Groups) mainly have answers for 1.4 and 2.X. Which of course are partially or completely incompatible.&lt;/p&gt;

&lt;p&gt;Documentation can be hard to find now. Sensio has done a tremendous job keeping its legacy documentation online and easy to find. However, due to link rot and time passing older blog posts, tips, hints and walkthroughs are often no longer available, or harder to search for. Also, training new employees and interns is much harder as tutorials and documentation haven&amp;#8217;t been updated for newer versions of PHP/Apache/MySQL.&lt;/p&gt;

&lt;p&gt;The big one in terms of productivity: I can effectively no longer use plugins. Symfony had and still has a great plugin system, somewhat similar to Ruby On Rails gems, that enabled you to add functionnality easily. Most plugins were written for version 1.2+, no new plugins for 1.X are being written (the community for Symfony 2.X bundles however is impressive). That means I often have to develop from scratch what could have been done by just installing a plugin. I recently had to add a small CMS to our app, and had to write it from the ground up. Symfony CMSs exist of course but none are compatible with my version.&lt;/p&gt;

&lt;p&gt;Somewhat more annoying, Symfony 1.0 used Prototype (scriptaculous) as its Javascript framework, and used it somewhat extensively. This led to all our client dside code using this library instead of today&amp;#8217;s de-facto standard, jQuery. UX advances which could require just a simple jQuery plugin have to be written from scratch. (we did solve that problem - more on that in a &lt;a href='/coding/2013/09/02/redoing-the-whole-user-interface-of-our-web-application.html'&gt;later post&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This framework is not compatible with newer versions of PHP. It was written for PHP 5.2, and is compatible with PHP 5.3 but no longer works on PHP 5.4. I haven&amp;#8217;t even tried 5.5 yet. This prevents us from using the language&amp;#8217;s new features, and we can&amp;#8217;t use new some of the new libraries.&lt;/p&gt;

&lt;p&gt;Basically I&amp;#8217;m one third less productive when programming than I could be.&lt;/p&gt;

&lt;p&gt;There are of course consequences for our users. While the code is quite maintainable, features and bug fixes aren&amp;#8217;t rolled out as fast as we&amp;#8217;d like. Users have to live with the defficiencies just a bit longer than we would like them to. Speed is an other issue. Compared to Symfony 2.X, 1.X is slow. Framework overhead is really much higher than it could be. Using 2.X would probably speed execution by a factor of 2.&lt;/p&gt;

&lt;p&gt;Apart from that though, our users don&amp;#8217;t feel the age of the framework that much. And that&amp;#8217;s why it&amp;#8217;s still more cost-efficient to keep this framework than to migrate everything. That doesn&amp;#8217;t mean I&amp;#8217;m not making life easier for myself as we go on. More on that in later posts.&lt;/p&gt;

&lt;p&gt;Could this have been avoided ?&lt;/p&gt;

&lt;p&gt;Somewhat. While it was impossible to predict at the time of the release of 1.0 that Sensio would break backward compatibility with 2.X, regular upgrades to 1.1 all the way to 1.4 would have helped. The release of 2.X however would have required the complete rewrite we were unable/unwilling to finish.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further discussion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reddit discussion on &lt;a href='http://www.reddit.com/r/PHP'&gt;/r/php&lt;/a&gt;: &lt;a href='http://www.reddit.com/r/PHP/comments/1knp3v/the_walking_dead_living_with_a_legacy_php/'&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discussion on Hacker News: &lt;a href='https://news.ycombinator.com/item?id=6295509'&gt;https://news.ycombinator.com/item?id=6295509&lt;/a&gt;&lt;/p&gt;</description>
        <pubDate>Mon, 19 Aug 2013 00:00:00 +0200</pubDate>
        <link>/symfony/2013/08/19/the-walking-dead.html</link>
        <guid isPermaLink="true">/symfony/2013/08/19/the-walking-dead.html</guid>
      </item>
    
      <item>
        <title>Moving Forward: how we manage our product roadmap</title>
        <description>&lt;p&gt;One of my goal as our company&amp;#8217;s tech lead is to keep our product moving and not be overtaken by our competition feature-wise. My hope is that it will secure our existing clients, by giving them the key feature only we can provide. I hope it also shows them that our application is the best and fastest moving among our competitors. Of course, the other goal is to acquire new clients by having the key feature they need/want.&lt;/p&gt;

&lt;p&gt;Our company has seven people : the two founders (sales), the product manager (marketing), the account manager (client/operations), the template manager (operations/backend user), and the support person (tech support/user training), and me (tech lead). Of course, each person based on their perspective has their own idea on what we need to do to move the product forward.&lt;/p&gt;

&lt;p&gt;The previous system was an ad hoc one: decisions were made one by one depending on the situation and who was in the room. It was inefficient.&lt;/p&gt;

&lt;p&gt;Now, everytime someone has an idea or encounters a bug, they write a ticket to our Trello board, and I triage it. If it&amp;#8217;s a bug, it gets solved immediately. If it&amp;#8217;s a new feature, I do some research and evaluate the feasability and workload, then write down the steps to implement this change. Sales&amp;#8217; ideas come from questions and requests by prospects. The product manager tries and move forward on our long term product strategy and our app&amp;#8217;s user experience. The account manager will often advocate for our clients&amp;#8217; direct needs while support will talk about the clients&amp;#8217; users&amp;#8217; needs. The template manager will push for the features that make his job easier and make him more productive. I try and make myself more productive - and will often push for the &amp;#8220;cool&amp;#8221; features, those that are fun to look at or fun to implement. While there is no guarantee that is true, the overall feeling is that this approach lets us improve all the important parts of our app.&lt;/p&gt;

&lt;p&gt;Next comes the &amp;#8220;Roadmap meeting&amp;#8221;. We try to have them every three weeks. The trigger for the new meeting is the end of the previous sprint. Everybody comes. During this meeting, the product manager and I show to everybody the new features that have been developed and how they work. That way we ensure that everyone knows what our app can do as its features get added further. Any feedback can be added to a new Trello ticket.&lt;/p&gt;

&lt;p&gt;After that, we go through all the tickets on our Trello board, and one by one, decide whether to add them or not to the next sprint. Following agile practices we try to have approximately 3 weeks worth of development in our sprints. Going against agile practice, we don&amp;#8217;t just have one product owner, everybody gets a say. This hasn&amp;#8217;t yet led to any problem, as our sprints are long enough to fit something for everybody, and short enough to allow everybody to wait for next time if necessary. Final call would go to the company&amp;#8217;s CEO if it came to that, but that has never happened.&lt;/p&gt;

&lt;p&gt;Most new features then go through to the product manager who will create short mockups that let me know how it should look and act (we use Balsamiq for that). Then I get coding ! When everything in the sprint is done, we have the next Roadmap meeting.&lt;/p&gt;

&lt;p&gt;This system works pretty well for us. Everybody has enough of an input to have the app move forward enough on all fronts. Our product manager has free reign and ensures user experience and coherence, and I have a free reign in implementation.&lt;/p&gt;

&lt;p&gt;What&amp;#8217;s wrong with this system? A few things.&lt;/p&gt;

&lt;p&gt;For one thing, the roadmap grows faster that we can implement it. This sometimes leads to morale slumps, as the team does sometimes feel that we aren&amp;#8217;t moving forward, or aren&amp;#8217;t moving fast enough. That may be solved as we increase the tech team size and overall productivity. For now, though, we have to live with it.&lt;/p&gt;

&lt;p&gt;Also, we are completely unable to give a release date for any of our new features. As we are a B2B business, we have regular conversations with our clients and it can be frustrating for them to request new features and our response constantly be &amp;#8220;It&amp;#8217;s in the Roadmap, we&amp;#8217;ll get to it as soon as we can&amp;#8221;. We try to mitigate this by taking into account client feedback when defining the sprint as well as sometimes giving them release date goals (Q3 2013 for example) - on which we aren&amp;#8217;t commited. We also let our clients pay to move features up in the Roadmap. That lets them decide on their own if what they want is important enough for them to incur the cost. As you can guess, most of them prefer to wait. Some however have paid.&lt;/p&gt;

&lt;p&gt;These problems are however somewhat minor considering how much this process has let us move forward.&lt;/p&gt;</description>
        <pubDate>Mon, 12 Aug 2013 00:00:00 +0200</pubDate>
        <link>/startup/process/2013/08/12/moving-forward.html</link>
        <guid isPermaLink="true">/startup/process/2013/08/12/moving-forward.html</guid>
      </item>
    
  </channel>
</rss>